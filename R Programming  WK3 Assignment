## Done following the makevector() function as in module.

makeCacheMatrix <- function(x = matrix()) {
        local_m <- NULL                                		##Initialization of m to NULL ensures that it doesnt collect any garbage when next function is run. 
        set <- function(y) {                                    
                cache_x <<- y                                  
                cache_m <<- NULL                                ## Initialization of cache_m to NULL ensures that it doesnt collect any garbage when next function is run.        
        }
        get <- function() cache_x                               ## Function to get/return the matrix passed in the command line call to '$set
        set_cache_m <- function(local_m) cache_m <<- local_m    ## Function to set the value of cache_m in cache to the value of local_m passed in the call to '$set_cache_m.        
        get_cache_m <- function() cache_m                       ## Function to retrieve value of cache_m from cache and return cache_m 
        list(set = set, get = get,
             set_cache_m = set_cache_m,
             get_cache_m = get_cache_m)
}

## Done following the cacheclean() function as in module.
cacheSolve <- function(x) {                     
        local_m<- x$get_cache_m()               ## Get the value for m in the cache environment  in a local m.
        if(!is.null(local_m)) {                 ##  Ensure m is NOT NULL
                message("getting cached data")  
                return(local_m)
        }                                       ## If we get to this line, m was NULL
        startingmatrix <- x$get()               ## Call the nested function x$get in makeCacheMatrix to obtain the UNinverted matrix with which to start, and assign it to startingmatrix.                         
        endingmatrix <- solve(startingmatrix)   ## Used solve() to invert the startingmatrix.  Assigned the result to endingmatrix.
        x$set_cache_m(endingmatrix)             ## Call nested function x$set_cache_m() in makeCacheMatrix to set m in the cache environment non-NULL inverted result in endingmatrix
        endingmatrix                            ## Evaluate endingmatrix so as to return it to caller/console if cache_m is non NULL.
}
